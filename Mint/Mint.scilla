(* SPDX-License-Identifier: MIT *)
scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import IntUtils ListUtils 

library Mint
let one = Uint256 1
let zero = Uint128 0
let ten = Uint256 10
let true = True
let false = False
let empty_string = ""
let one_msg = 
    fun (msg : Message) => 
        let nil_msg = Nil {Message} in
        Cons {Message} msg nil_msg   

(* Dummy user-defined ADT *)
type Error =
| CodeIsOwner
| CodeIsSameBlock
| CodeIsHeroesNotSet
| CodeIsDlHeroesNotSet
| CodeIsGearsNotSet

let make_error =
    fun (result : Error) =>
        let result_code = 
        match result with
        | CodeIsOwner                => Int32 -1
        | CodeIsSameBlock            => Int32 -2
        | CodeIsHeroesNotSet         => Int32 -3 
        | CodeIsDlHeroesNotSet       => Int32 -4
        | CodeIsGearsNotSet          => Int32 -5
        end
        in
        { _exception : "Error"; code : result_code }

(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract Mint 
(
    contract_owner: ByStr20
)

(* Mutable fields *)
field oracleAddress: Option ByStr20 = None {ByStr20}


(* Mapping for caller Address to BlockNumber *)
field caller_block_num: Map ByStr20 BNum = Emp ByStr20 BNum

(* The total number of heroes minted *)
field heroes_id_count: Uint256 = Uint256 0

(* The total number of dl_heroes minted *)
field dl_heroes_id_count: Uint256 = Uint256 0

(* The total number of gears minted *)
field gears_id_count: Uint256 = Uint256 0

(**************************************)
(*             Procedures             *)
(**************************************)

procedure ThrowError(error: Error)
    e = make_error error;
    throw e
end


procedure IsSameBlock(blk: BNum)
    last_blk <- caller_block_num[_sender];
    match last_blk with
    | Some v =>
        is_allowed = builtin blt v blk;
        match is_allowed with
        | False =>
            err = CodeIsSameBlock;
            ThrowError err
        | True =>
        end
    | None =>
    end
end


procedure IsNotOwner(address: ByStr20)
    is_owner = builtin eq contract_owner address;
    match is_owner with
    | False =>
        err = CodeIsOwner;
        ThrowError err
    | True =>
    end
end

(***************************************)
(*             Transitions             *)
(***************************************)



(* @dev: Transition for users to Mint 1*-3* Heroes.This transition invokes requestRandomNumber() transition in the oracle contract   *)
transition Mint13Heroes()
    blk <- & BLOCKNUMBER;
    IsSameBlock blk;


    current_heroes_id_count <- heroes_id_count;
    new_heroes_id_count = builtin add current_heroes_id_count one;
    heroes_id_count := new_heroes_id_count;
    token_id = new_heroes_id_count;

    e = {
        _eventname : "Mint13Heroes";
        token_id: token_id;
        to: _sender
    };
    event e

end

(* @dev: Transition for users to Mint 1*-3* Gears.This transition invokes requestG13RandomNumber() transition in the oracle contract   *)
transition Mint13Gears()
    blk <- & BLOCKNUMBER;
    IsSameBlock blk;


    (* generate ID *)
    current_gears_id_count <- gears_id_count;
    new_gears_id_count = builtin add current_gears_id_count one;
    gears_id_count := new_gears_id_count;
    token_id = new_gears_id_count;

    e = {
        _eventname : "Mint13Gears";
        token_id: token_id;
        to: _sender
    };
    event e
end

(* @dev: Transition for users to Mint 3*-5* Heroes.This transition invokes requestRandomNumber() transition in the oracle contract   *)
transition Mint35Heroes()
    blk <- & BLOCKNUMBER;
    IsSameBlock blk;

    (* generate ID *)
    current_heroes_id_count <- heroes_id_count;
    new_heroes_id_count = builtin add current_heroes_id_count one;
    heroes_id_count := new_heroes_id_count;
    token_id = new_heroes_id_count;

    e = {
        _eventname : "Mint35Heroes";
        token_id: token_id;
        to: _sender
    };
    event e
end

(* @dev: Transition for users to Mint 3*-5* Heroes.This transition invokes requestRandomNumber() transition in the oracle contract   *)
transition Mint35Gears()
    blk <- & BLOCKNUMBER;
    IsSameBlock blk;

    (* generate ID *)
    current_gears_id_count <- gears_id_count;
    new_gears_id_count = builtin add current_gears_id_count one;
    gears_id_count := new_gears_id_count;
    token_id = new_gears_id_count;

    e = {
        _eventname : "Mint35Gears";
        token_id: token_id;
        to: _sender
    };
    event e
end

(* @dev: Transition for users to Mint Dark/Light Heroes.This transition invokes requestRandomNumber() transition in the oracle contract   *)
transition MintDLHeroes()
    blk <- & BLOCKNUMBER;
    IsSameBlock blk;

    (* generate ID *)
    current_dl_heroes_id_count <- dl_heroes_id_count;
    new_dl_heroes_id_count = builtin add current_dl_heroes_id_count one;
    dl_heroes_id_count := new_dl_heroes_id_count;
    token_id = new_dl_heroes_id_count;

    e = {
        _eventname : "MintDLHeroes";
        token_id: token_id;
        to: _sender
    };
    event e
end


(* @dev: Transition for users to Batch Mint 1*-3* Heroes.This transition invokes requestBatchRandomNumber() transition in the oracle contract   *)
transition BatchMint13Heroes()
    blk <- & BLOCKNUMBER;
    IsSameBlock blk;

    (* generate ID *)
    current_heroes_id_count <- heroes_id_count;
    start_id = builtin add current_heroes_id_count one;
    end_id = builtin add current_heroes_id_count ten;
    heroes_id_count := end_id;

    e = {
        _eventname : "BatchMint13Heroes";
        token_id: start_id;
        to: _sender
    };
    event e
end

(* @dev: Transition for users to Batch Mint 1*-3* Heroes.This transition invokes requestBatchRandomNumber() transition in the oracle contract   *)
transition BatchMint13Gears()
    blk <- & BLOCKNUMBER;
    IsSameBlock blk;

    (* generate ID *)
    current_gears_id_count <- gears_id_count;
    start_id = builtin add current_gears_id_count one;
    end_id = builtin add current_gears_id_count ten;
    gears_id_count := end_id;

    e = {
        _eventname : "BatchMint13Gears";
        token_id: start_id;
        to: _sender
    };
    event e
end

(* @dev: Transition for users to Batch Mint 3*-5* Heroes.This transition invokes requestBatchRandomNumber() transition in the oracle contract   *)
transition BatchMint35Heroes()
    blk <- & BLOCKNUMBER;
    IsSameBlock blk;

    (* generate ID *)
    current_heroes_id_count <- heroes_id_count;
    start_id = builtin add current_heroes_id_count one;
    end_id = builtin add current_heroes_id_count ten;
    heroes_id_count := end_id;

    e = {
        _eventname : "BatchMint35Heroes";
        token_id: start_id;
        to: _sender
    };
    event e
end

(* @dev: Transition for users to Batch Mint 3*-5* Gears.This transition invokes requestBatchRandomNumber() transition in the oracle contract   *)
transition BatchMint35Gears()
    blk <- & BLOCKNUMBER;
    IsSameBlock blk;

    (* generate ID *)
    current_gears_id_count <- gears_id_count;
    start_id = builtin add current_gears_id_count one;
    end_id = builtin add current_gears_id_count ten;
    gears_id_count := end_id;

    e = {
        _eventname : "BatchMint35Gears";
        token_id: start_id;
        to: _sender
    };
    event e
end

transition MintSpecificHero(rarity: String, token_type: String)
    blk <- & BLOCKNUMBER;
    IsSameBlock blk;

    (* generate ID *)
    current_heroes_id_count <- heroes_id_count;
    new_heroes_id_count = builtin add current_heroes_id_count one;
    heroes_id_count := new_heroes_id_count;
    token_id = new_heroes_id_count;

    e = {
        _eventname : "MintSpecificHeroes";
        token_id: token_id;
        to: _sender;
        rarity: rarity;
        token_type: token_type
    };
    event e
end

transition MintSpecificGear(rarity: String, token_type: String, mainstat: String)
    blk <- & BLOCKNUMBER;
    IsSameBlock blk;

    (* generate ID *)
    current_gears_id_count <- gears_id_count;
    new_gears_id_count = builtin add current_gears_id_count one;
    gears_id_count := new_gears_id_count;
    token_id = new_gears_id_count;

    e = {
        _eventname : "MintSpecificGear";
        token_id: token_id;
        to: _sender;
        rarity: rarity;
        token_type: token_type;
        mainstat: mainstat
    };
    event e
end