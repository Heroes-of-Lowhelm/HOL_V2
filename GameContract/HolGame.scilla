(* SPDX-License-Identifier: MIT *)
scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import IntUtils ListUtils 

library HolGame
let zero_address = 0x0000000000000000000000000000000000000000
let one = Uint256 1
let zero = Uint128 0
let uint_128_10_power_5 = Uint128 100000
let ten = Uint256 10
let true = True
let false = False
let empty_string = ""
let one_msg = 
    fun (msg : Message) => 
        let nil_msg = Nil {Message} in
        Cons {Message} msg nil_msg   

(* Dummy user-defined ADT *)


type Error =
| CodeIsOwner
| NotAdminError
| AdminFoundError
| RequestAmountExceedErr
| TWAPHolAddressNotSetErr
| MintPriceNotSetError
| MintContractAddressNotSetErr
| TWAPCastAddressNotSetErr
| TokenAddressNotSetErr

let make_error =
    fun (result : Error) =>
        let result_code = 
        match result with
        | CodeIsOwner                => Int32 -1
        | NotAdminError                => Int32 -2
        | AdminFoundError => Int32 -3
        | RequestAmountExceedErr => Int32 -4
        | TWAPHolAddressNotSetErr => Int32 -5
        | MintPriceNotSetError    => Int32 -6
        | MintContractAddressNotSetErr => Int32 -7
        | TWAPCastAddressNotSetErr    => Int32 -8
        | TokenAddressNotSetErr       => Int32 -9
        end
        in
        { _exception : "Error"; code : result_code }

(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract HolGame 
(
    contract_owner: ByStr20
)

(* Mutable fields *)
(* Set for admins
  contract_owner is the admin by default *)
field admins: Map ByStr20 Bool = 
  let emp_map = Emp ByStr20 Bool in
  builtin put emp_map contract_owner true

(* $HOL token address *)
field hol_token_address: ByStr20 = zero_address
(* $CAST token address *)
field cast_token_address: ByStr20 = zero_address
(* Map user address => token address => balance *)
field account_balances: Map ByStr20 (Map ByStr20 Uint128) = Emp ByStr20 (Map ByStr20 Uint128)

field hol_twap_address: ByStr20 = zero_address
field cast_twap_address: ByStr20 = zero_address

field mint_contract_address: ByStr20 = zero_address

(* Mint const in USD 10^5 multiplied value if 3$, then the value is 300000*)
field mint_13_heroes_cost: Uint128 = zero;
field mint_35_heroes_cost: Uint128 = zero;
field mint_13_gears_cost: Uint128 = zero;
field mint_35_gears_cost: Uint128 = zero;
field mint_13_heroes_batch_cost: Uint128 = zero;
field mint_35_heroes_batch_cost: Uint128 = zero;
field mint_13_gears_batch_cost: Uint128 = zero;
field mint_35_gears_batch_cost: Uint128 = zero;
(**************************************)
(*             Procedures             *)
(**************************************)

procedure ThrowError(error: Error)
    e = make_error error;
    throw e
end



procedure IsNotOwner(address: ByStr20)
    is_owner = builtin eq contract_owner address;
    match is_owner with
    | False =>
        err = CodeIsOwner;
        ThrowError err
    | True =>
    end
end

(* Check is the address is admin or not *)
procedure IsAdmin()
  has_admin <- exists admins[_sender];
  match has_admin with
  | True =>
  | False =>
    error = NotAdminError;
    ThrowError error
  end
end

(* Check if the TWAP of HOL is set or not *)
procedure IsTWAPHolSet()
    hol_twap_address_tmp <- hol_twap_address;
    is_zero_addr = builtin eq hol_twap_address_tmp zero_address;
    match is_zero_addr with
    | True =>
        error = TWAPHolAddressNotSetErr;
        ThrowError error
    | False =>
    end
end

(* Check if the TWAP of CAST is set or not *)
procedure IsTWAPCastSet()
    cast_twap_address_tmp <- cast_twap_address;
    is_zero_addr = builtin eq cast_twap_address_tmp zero_address;
    match is_zero_addr with
    | True =>
        error = TWAPCastAddressNotSetErr;
        ThrowError error
    | False =>
    end
end


procedure IsMintContractSet()
    mint_contract_address_tmp <- mint_contract_address;
    is_zero_addr = builtin eq mint_contract_address_tmp zero_address;
    match is_zero_addr with
    | True =>
        error = MintContractAddressNotSetErr;
        ThrowError error
    | False =>
    end
end

procedure IsTokenAddressesSet()
    cast_token_address_tmp <- cast_token_address;
    hol_token_address_tmp <- hol_token_address;
    is_invalid_hol = builtin eq hol_token_address_tmp zero_address;
    is_invalid_cast = builtin eq cast_token_address_tmp zero_address;
    is_invalid = orb is_invalid_hol is_invalid_cast;
    match is_invalid with
    | True =>
        error = TokenAddressNotSetErr;
        ThrowError error
    | False =>
    end
end

procedure IsMintPriceSet()
    mint_13_heroes_cost_tmp <- mint_13_heroes_cost;
    mint_35_heroes_cost_tmp <- mint_35_heroes_cost;
    mint_13_gears_cost_tmp <- mint_13_gears_cost;
    mint_35_gears_cost_tmp <- mint_35_gears_cost;
    mint_13_heroes_batch_cost_tmp <- mint_13_heroes_batch_cost;
    mint_35_heroes_batch_cost_tmp <- mint_35_heroes_batch_cost;
    mint_13_gears_batch_cost_tmp <- mint_13_gears_batch_cost;
    mint_35_gears_batch_cost_tmp <- mint_35_gears_batch_cost;

    is_invalid1 = builtin eq mint_13_heroes_cost_tmp zero;
    is_invalid2 = builtin eq mint_35_heroes_cost_tmp zero;
    is_invalid3 = builtin eq mint_13_gears_cost_tmp zero;
    is_invalid4 = builtin eq mint_35_gears_cost_tmp zero;
    is_invalid5 = builtin eq mint_13_heroes_batch_cost_tmp zero;
    is_invalid6 = builtin eq mint_35_heroes_batch_cost_tmp zero;
    is_invalid7 = builtin eq mint_13_gears_batch_cost_tmp zero;
    is_invalid8 = builtin eq mint_35_gears_batch_cost_tmp zero;

    is_invalid12 = orb is_invalid1 is_invalid2;
    is_invalid123 = orb is_invalid12 is_invalid3;
    is_invalid1234 = orb is_invalid123 is_invalid4;
    is_invalid12345 = orb is_invalid1234 is_invalid5;
    is_invalid123456 = orb is_invalid12345 is_invalid6;
    is_invalid1234567 = orb is_invalid123456 is_invalid7;
    is_invalid12345678 = orb is_invalid1234567 is_invalid8;

    match is_invalid12345678 with
    | True =>
        error = MintPriceNotSetError;
        ThrowError error
    | False =>
    end
end

procedure HandleFunds(to: ByStr20, token_address: ByStr20, amount: Uint128)
    origin_amount <- account_balances[to][token_address];
    match origin_amount with
    | Some value =>
        insufficient = builtin lt value amount;
        match insufficient with
        | True =>
            error = RequestAmountExceedErr;
            ThrowError error
        | False =>
            new_amount = builtin sub value amount;
            account_balances[to][token_address] := new_amount;
        end
    | None =>
        error = RequestAmountExceedErr;
        ThrowError error
    end
end


(***************************************)
(*             Transitions             *)
(***************************************)
(* This transition is invoked when depositing tx to the game contract is found *)
(* @param: to - User address that funds are deposited  *)
(* @param: token_address - Token address that user deposited  *)
(* @param: amount - Token amount that user deposited  *)
(* @Requirements: *)
(* - `_sender` must be the contract Admin. *)
transition DepositFund(to: ByStr20, token_address: ByStr20, amount: Uint128)
    IsAdmin;
    origin_amount <- account_balances[to][token_address];
    match origin_amount with
    | Some value =>
        new_amount = builtin add value amount;
        account_balances[to][token_address] := new_amount
    | None =>
        account_balances[to][token_address] := amount
    end
    
end


(* This transition is invoked when user request to withdraw*)
(* @param: to - User address *)
(* @param: token_address - Token address*)
(* @param: amount - Token amount *)
(* @Requirements: *)
(* - `_sender` must be the contract Admin. *)
transition WithdrawFund(to: ByStr20, token_address: ByStr20, amount: Uint128)
    IsAdmin;
    origin_amount <- account_balances[to][token_address];
    match origin_amount with
    | Some value =>
        insufficient = builtin lt value amount;
        match insufficient with
        | True =>
            error = RequestAmountExceedErr;
            ThrowError error
        | False =>
            new_amount = builtin sub value amount;
            account_balances[to][token_address] := new_amount;
            (* Transfer funds to user accounts *)
            msg = {
                _tag: "Transfer";
                _recipient: token_address;
                _amount: zero;
                to: to;
                amount: amount
            };
            msgs = one_msg msg;
            send msgs;
            e = {
                _eventname: "WithdrawSuccess";
                to: to
            };
            event e
        end
    | None =>
        error = RequestAmountExceedErr;
        ThrowError error
    end
end


(* This transition is invoked when user request to Mint*)
(* Firstly, checks if the user account has enough funds based on the TWAP Price *)
(* And then reduce the user account balance *)
(* And then call the Mint transition of the Mint Contract *)
(* @param: to - User address *)
(* @Requirements: *)
(* - `_sender` must be the contract Admin. *)
(* - TWAP of Hol address must be set. *)
transition Mint13Heroes(to: ByStr20)
    IsAdmin;
    IsTWAPCastSet;
    IsMintPriceSet;
    IsMintContractSet;
    IsTokenAddressesSet;

    (* Remote Fetch CAST price *)
    cast_twap_address_tmp <- cast_twap_address;
    twap_cast <- & cast_twap_address_tmp.twap;

    (* price/twap * 10^5 *)
    mint_13_heroes_cost_tmp <- mint_13_heroes_cost;
    cast_price_tmp = builtin mul mint_13_heroes_cost_tmp uint_128_10_power_5;
    mint_cast_price = builtin div cast_price_tmp twap_cast;

    cast_token_address_tmp <- cast_token_address;
    HandleFunds to cast_token_address_tmp mint_cast_price;

    mint_contract_address_tmp <- mint_contract_address;
    (* Call Mint Transition *)
    msg = {
        _tag: "Mint13Heroes";
        _recipient: mint_contract_address_tmp;
        _amount: zero;
    }
    msgs = one_msg msg;
    send msgs
end

transition Mint35Heroes(to: ByStr20)
    IsAdmin;
    IsTWAPHolSet;
    IsMintPriceSet;
    IsMintContractSet;
    IsTokenAddressesSet;

    (* Remote Fetch HOL price *)
    hol_twap_address_tmp <- hol_twap_address;
    twap_hol <- & hol_twap_address_tmp.twap;
    (* price/twap * 10^5 *)
    mint_35_heroes_cost_tmp <- mint_35_heroes_cost;
    hol_price_tmp = builtin mul mint_35_heroes_cost_tmp uint_128_10_power_5;
    mint_hol_price = builtin div hol_price_tmp twap_hol;

    hol_token_address_tmp <- hol_token_address;
    HandleFunds to hol_token_address_tmp mint_hol_price;

    mint_contract_address_tmp <- mint_contract_address;
    (* Call Mint Transition *)
    msg = {
        _tag: "Mint35Heroes";
        _recipient: mint_contract_address_tmp;
        _amount: zero;
    }
    msgs = one_msg msg;
    send msgs
end

transition Mint13Gears(to: ByStr20)
    IsAdmin;
    IsTWAPCastSet;
    IsMintPriceSet;
    IsMintContractSet;
    IsTokenAddressesSet;

    (* Remote Fetch CAST price *)
    cast_twap_address_tmp <- cast_twap_address;
    twap_cast <- & cast_twap_address_tmp.twap;

    (* price/twap * 10^5 *)
    mint_13_gears_cost_tmp <- mint_13_gears_cost;
    cast_price_tmp = builtin mul mint_13_gears_cost_tmp uint_128_10_power_5;
    mint_cast_price = builtin div cast_price_tmp twap_cast;

    cast_token_address_tmp <- cast_token_address;
    HandleFunds to cast_token_address_tmp mint_cast_price;

    mint_contract_address_tmp <- mint_contract_address;
    (* Call Mint Transition *)
    msg = {
        _tag: "Mint13Gears";
        _recipient: mint_contract_address_tmp;
        _amount: zero;
    }
    msgs = one_msg msg;
    send msgs
end

transition Mint35Gears(to: ByStr20)
    IsAdmin;
    IsTWAPHolSet;
    IsMintPriceSet;
    IsMintContractSet;
    IsTokenAddressesSet;

    (* Remote Fetch HOL price *)
    hol_twap_address_tmp <- hol_twap_address;
    twap_hol <- & hol_twap_address_tmp.twap;
    (* price/twap * 10^5 *)
    mint_35_gears_cost_tmp <- mint_35_gears_cost;
    hol_price_tmp = builtin mul mint_35_gears_cost_tmp uint_128_10_power_5;
    mint_hol_price = builtin div hol_price_tmp twap_hol;

    hol_token_address_tmp <- hol_token_address;
    HandleFunds to hol_token_address_tmp mint_hol_price;

    mint_contract_address_tmp <- mint_contract_address;
    (* Call Mint Transition *)
    msg = {
        _tag: "Mint35Gears";
        _recipient: mint_contract_address_tmp;
        _amount: zero;
    }
    msgs = one_msg msg;
    send msgs
end

transition BatcMint13Heroes(to: ByStr20)
    IsAdmin;
    IsTWAPCastSet;
    IsMintPriceSet;
    IsMintContractSet;
    IsTokenAddressesSet;

    (* Remote Fetch CAST price *)
    cast_twap_address_tmp <- cast_twap_address;
    twap_cast <- & cast_twap_address_tmp.twap;

    (* price/twap * 10^5 *)
    mint_13_heroes_batch_cost_tmp <- mint_13_heroes_batch_cost;
    cast_price_tmp = builtin mul mint_13_heroes_batch_cost_tmp uint_128_10_power_5;
    mint_cast_price = builtin div cast_price_tmp twap_cast;

    cast_token_address_tmp <- cast_token_address;
    HandleFunds to cast_token_address_tmp mint_cast_price;

    mint_contract_address_tmp <- mint_contract_address;
    (* Call Mint Transition *)
    msg = {
        _tag: "BatchMint13Heroes";
        _recipient: mint_contract_address_tmp;
        _amount: zero;
    }
    msgs = one_msg msg;
    send msgs
end

transition BatchMint35Heroes(to: ByStr20)
    IsAdmin;
    IsTWAPHolSet;
    IsMintPriceSet;
    IsMintContractSet;
    IsTokenAddressesSet;

    (* Remote Fetch HOL price *)
    hol_twap_address_tmp <- hol_twap_address;
    twap_hol <- & hol_twap_address_tmp.twap;
    (* price/twap * 10^5 *)
    mint_35_heroes_batch_cost_tmp <- mint_35_heroes_batch_cost;
    hol_price_tmp = builtin mul mint_35_heroes_batch_cost_tmp uint_128_10_power_5;
    mint_hol_price = builtin div hol_price_tmp twap_hol;

    hol_token_address_tmp <- hol_token_address;
    HandleFunds to hol_token_address_tmp mint_hol_price;

    mint_contract_address_tmp <- mint_contract_address;
    (* Call Mint Transition *)
    msg = {
        _tag: "BatchMint35Heroes";
        _recipient: mint_contract_address_tmp;
        _amount: zero;
    }
    msgs = one_msg msg;
    send msgs
end

transition BatchMint13Gears(to: ByStr20)
    IsAdmin;
    IsTWAPCastSet;
    IsMintPriceSet;
    IsMintContractSet;
    IsTokenAddressesSet;

    (* Remote Fetch CAST price *)
    cast_twap_address_tmp <- cast_twap_address;
    twap_cast <- & cast_twap_address_tmp.twap;

    (* price/twap * 10^5 *)
    mint_13_gears_batch_cost_tmp <- mint_13_gears_batch_cost;
    cast_price_tmp = builtin mul mint_13_gears_batch_cost_tmp uint_128_10_power_5;
    mint_cast_price = builtin div cast_price_tmp twap_cast;

    cast_token_address_tmp <- cast_token_address;
    HandleFunds to cast_token_address_tmp mint_cast_price;

    mint_contract_address_tmp <- mint_contract_address;
    (* Call Mint Transition *)
    msg = {
        _tag: "BatchMint13Gears";
        _recipient: mint_contract_address_tmp;
        _amount: zero;
    }
    msgs = one_msg msg;
    send msgs
end

transition BatchMint35Gears(to: ByStr20)
    IsAdmin;
    IsTWAPHolSet;
    IsMintPriceSet;
    IsMintContractSet;
    IsTokenAddressesSet;

    (* Remote Fetch HOL price *)
    hol_twap_address_tmp <- hol_twap_address;
    twap_hol <- & hol_twap_address_tmp.twap;
    (* price/twap * 10^5 *)
    mint_35_gears_batch_cost_tmp <- mint_35_gears_batch_cost;
    hol_price_tmp = builtin mul mint_35_gears_batch_cost_tmp uint_128_10_power_5;
    mint_hol_price = builtin div hol_price_tmp twap_hol;

    hol_token_address_tmp <- hol_token_address;
    HandleFunds to hol_token_address_tmp mint_hol_price;

    mint_contract_address_tmp <- mint_contract_address;
    (* Call Mint Transition *)
    msg = {
        _tag: "BatchMint35Gears";
        _recipient: mint_contract_address_tmp;
        _amount: zero;
    }
    msgs = one_msg msg;
    send msgs
end


(* This transition uses card in Game. *)
transition MintDLHeroes(to: ByStr20)
    IsAdmin;
    IsMintContractSet;

    mint_contract_address_tmp <- mint_contract_address;
    (* Call Mint Transition *)
    msg = {
        _tag: "MintDLHeroes";
        _recipient: mint_contract_address_tmp;
        _amount: zero;
    }
    msgs = one_msg msg;
    send msgs
end

transition AddAdmin(admin: ByStr20)
  IsNotOwner _sender;
  has_admin <- exists admins[admin];
  match has_admin with
  | True =>
    error = AdminFoundError;
    ThrowError error
  | False =>
    admins[admin] := true
  end
end

transition SetHolAddress(hol_address: ByStr20)
    IsNotOwner _sender;
    hol_token_address := hol_address
end

transition SetCastAddress(cast_address: ByStr20)
    IsNotOwner _sender;
    cast_token_address := cast_address
end


transition SetHolTWAPAddress(hol_twap: ByStr20 with contract field twap: Uint128 end)
    IsNotOwner _sender;
    hol_twap_address := hol_twap
end

transition SetCastTWAPAddress(cast_twap: ByStr20 with contract field twap: Uint128 end)
    IsNotOwner _sender;
    cast_twap_address := cast_twap
end

transition SetMint13HeroesPrice(price: Uint128)
    IsNotOwner _sender;
    mint_13_heroes_cost := price
end

transition SetMint35HeroesPrice(price: Uint128)
    IsNotOwner _sender;
    mint_35_heroes_cost := price
end


transition SetMint13GearsPrice(price: Uint128)
    IsNotOwner _sender;
    mint_13_gears_cost := price
end

transition SetMint35GearsPrice(price: Uint128)
    IsNotOwner _sender;
    mint_35_gears_cost := price
end

transition SetMint13HeroesBatchPrice(price: Uint128)
    IsNotOwner _sender;
    mint_13_heroes_batch_cost := price
end

transition SetMint35HeroesBatchPrice(price: Uint128)
    IsNotOwner _sender;
    mint_35_heroes_batch_cost := price
end

transition SetMint13GearsBatchPrice(price: Uint128)
    IsNotOwner _sender;
    mint_13_gears_batch_cost := price
end

transition SetMint35GearsBatchPrice(price: Uint128)
    IsNotOwner _sender;
    mint_35_gears_batch_cost := price
end

transition TransferSuccessCallBack(sender: ByStr20, recipient: ByStr20, amount: Uint128)

end